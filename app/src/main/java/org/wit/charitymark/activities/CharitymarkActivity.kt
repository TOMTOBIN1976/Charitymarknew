package org.wit.charitymark.activities

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.text.BoringLayout.make
import android.view.Menu
import android.view.MenuItem
import com.google.android.material.snackbar.Snackbar
import org.wit.charitymark.R
import org.wit.charitymark.databinding.ActivityCharitymarkBinding
import org.wit.charitymark.main.MainApp
import org.wit.charitymark.models.CharitymarkModel
import timber.log.Timber
import timber.log.Timber.i

class CharitymarkActivity : AppCompatActivity() {
    // ActivityCharitymarkBinding class is an autogenerated class
    // Import to access the View objects on layout (activity_charitymark.xml).
    private lateinit var binding: ActivityCharitymarkBinding
    // creating a charitymark as a class member (used in event handler btnAdd.setOnClickListener)
    var charitymark = CharitymarkModel()
    lateinit var app: MainApp

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //ocal flag initialised to false:
        var edit = false

        // inflate our layout using this binding class
        binding = ActivityCharitymarkBinding.inflate(layoutInflater)
        setContentView(binding.root)
        // Enable toolbar (for cancelling a charity event before adding)
        binding.toolbarAdd.title = title
        setSupportActionBar(binding.toolbarAdd)

        app = application as MainApp
        i("Charitymark Activity started.")

        if (intent.hasExtra("charitymark_edit")) {
            //Set the flag to true if we have a charity event passed
            edit = true
            charitymark = intent.extras?.getParcelable("charitymark_edit")!!
            binding.charitymarkTitle.setText(charitymark.title)
            binding.description.setText(charitymark.description)
            // Save Charity event button label CharitymarkActivity is launched with a charity event passed to it.
            binding.btnAdd.setText(R.string.save_charitymark)
        }

        // bind to the Button
        // Adding update functionality (when charity event selected from charity event list activity)
        binding.btnAdd.setOnClickListener() {
            charitymark.title = binding.charitymarkTitle.text.toString()
            charitymark.description = binding.description.text.toString()
            if (charitymark.title.isEmpty()) {
                Snackbar.make(it,R.string.enter_charitymark_title, Snackbar.LENGTH_LONG)
                    .show()
            } else {
                if (edit) {
                    app.charitymarks.update(charitymark.copy())
                } else {
                    app.charitymarks.create(charitymark.copy())
                }
            }
            i("add Button Pressed: $charitymark")
            setResult(RESULT_OK)
            finish()
        }
    }
    // inflate the menu_charitymark to display CANCEL menu on
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_charitymark, menu)
        return super.onCreateOptionsMenu(menu)
    }
    // handle the menu CANCEL event with this method
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.item_cancel -> {
                finish()
            }
        }
        return super.onOptionsItemSelected(item)
    }
}